import pickle
import numpy as np
from sklearn import linear_model
import sklearn.metrics as sm
import matplotlib.pyplot as plt

#Input file
input_file = 'data_singlevar_regr.txt'
data = np.loadtxt(input_file, delimiter=',')
X, y = data[:, :-1], data[:, -1]

#Data separation
num_training = int(0.8 * len(X))
num_test = len(X) - num_training

X_train, y_train = X[:num_training], y[:num_training]
X_text, y_test = X[num_training:], y[num_training:]

#Creating lineaar regressor
regressor = linear_model.LinearRegression()
regressor.fit(X_train, y_train)

#Prediction the result
y_test_pred = regressor.predict(X_text)

#Check mae and etc
print("\nLinear regression performance:")
print("Mean Absolute Error =",
round(sm.mean_absolute_error(y_test, y_test_pred), 2))
print("Mean Squared Error =",
round(sm.mean_squared_error(y_test, y_test_pred), 2))
print("Median Absolute Error =",
round(sm.median_absolute_error(y_test, y_test_pred), 2))
print("Explain Variance Score =",
round(sm.explained_variance_score(y_test, y_test_pred), 2))
print("R2 score =",
round(sm.r2_score(y_test, y_test_pred), 2))

#Plot the graph
plt.scatter(X_text, y_test, color='green')
plt.plot(X_text, y_test_pred, color='black', linewidth=2)
plt.xticks(())
plt.yticks(())
plt.show()

#Saving the model
output_model_file = 'model.pkl'
with open(output_model_file, 'wb') as f:
    pickle.dump(regressor, f)

#Upload model
try:
    y_test_pred_new = regressor_model.predict(X_test)
    print("\nNew Maen Absolute Error =",
    round(sm.mean_absolute_error(y_test, y_test_pred_new), 2))
except Exception as e:
    print("\n", e)