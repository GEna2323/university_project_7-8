import matplotlib.pyplot as plt
import numpy as np
from sklearn import datasets, linear_model
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
from sklearn.model_selection import train_test_split
import sklearn.metrics as sm
from sklearn.preprocessing import PolynomialFeatures

#Input features
m = 100
X_init = 6 * np.random.rand(m, 1) - 5
y_init = 0.7 * X_init ** 2 + X_init + 3 + np.random.randn(m, 1)

X_train, X_test, y_train, y_test = train_test_split(X_init, y_init, test_size=0.2, random_state=13)

#Creating regressor
regressor = linear_model.LinearRegression()
regressor.fit(X_train, y_train)

#Make predictin
y_pred = regressor.predict(X_test)

#Polynomial regressor
poly_regressor = PolynomialFeatures(degree=2, include_bias=False)
X_poly = poly_regressor.fit_transform(X_train)
X_test_poly = poly_regressor.fit_transform(X_test)
poly_linear_regressor = linear_model.LinearRegression()
poly_linear_regressor.fit(X_poly, y_train)

#Make predictin
y_pred_poly = poly_linear_regressor.predict(X_test_poly)

#Check mae and etc
print("\nLinear regression performance vs Polynomial regression:")
print("======================================")
print("= Mean Absolute Error =",
round(sm.mean_absolute_error(y_test, y_pred), 2), ":",
round(sm.mean_absolute_error(y_test, y_pred_poly), 2), "=")
print("= Mean Squared Error  =",
round(sm.mean_squared_error(y_test, y_pred), 2), ":",
round(sm.mean_squared_error(y_test, y_pred_poly), 2), "=")
print("= R2 score            =",
round(sm.r2_score(y_test, y_pred), 2), ":",
round(sm.r2_score(y_test, y_pred_poly), 2), "=")
print("======================================")
print("Linear coef vs Polynomial coef:\n", regressor.coef_, "\n:\n", poly_linear_regressor.coef_)
print("======================================")
print("Linear intercept vs Polynomial intercept:\n", regressor.intercept_, "\n:\n", poly_linear_regressor.intercept_)
print("======================================")

#Sorting
sort_index = X_test.flatten().argsort()
X_test_sorted = X_test[sort_index]
y_pred_poly_sorted = y_pred_poly[sort_index]

plt.scatter(X_test, y_test, color='green')
plt.plot(X_test, y_pred, color='red', lw=2, label='Linear prediction')
plt.plot(X_test_sorted, y_pred_poly_sorted, color='black', lw=2, label='Polynomial prediction')
plt.legend()
plt.show()